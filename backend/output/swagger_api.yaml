```yaml
openapi: 3.0.3
info:
  title: User Registration API
  description: API for user registration including validation and storage of user data.
  version: 1.0.0
servers:
  - url: http://api.example.com/v1
    description: Main API server

paths:
  /users:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  pattern: '^[a-zA-Z0-9]+$'
                  example: "johnDoe123"
                password:
                  type: string
                  minLength: 8
                  example: "SecureP@ssw0rd"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                phone_number:
                  type: string
                  example: "+1234567890"
              required:
                - username
                - password
                - email
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful"
                  userId:
                    type: string
                    example: "abc123"
        '400':
          description: Bad request, validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"
        '409':
          description: Conflict, user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error occurred"

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string

security:
  - api_key: []
  
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header

tags:
  - name: Users
    description: Operations related to user registration
```