generate_django_backend:
  description: >
    Use the OpenAPI 3.0.3 specification to generate a complete Django backend in a single Python file.
    Follow these instructions closely:
      - Implement one Django view for each endpoint in the API contract.
      - In each view:
        - Validate the request method.
        - Parse and validate the JSON request body.
        - Check for presence of all required fields as defined in the schema's `required` list.
        - Return status `400` if required fields are missing or invalid.
        - Return status `201` with a success message if the input is valid.
        - Handle JSON decode errors gracefully and return `400` with the corresponding error message.
        - Catch generic server-side exceptions and return status `500` with a dummy error message.
      - Use `@csrf_exempt` on views to allow POST requests.
      - Return response payloads in the exact structure defined in the OpenAPI schemas (`SuccessResponse`, `ErrorResponse`).
      - Define the `urlpatterns` properly using Django’s `path()` function.
      - Configure minimal Django settings programmatically using `settings.configure(...)`.
      - Ensure the application runs using `get_wsgi_application()` and can be started via `python your_script.py`.
      - Do not use any database or external libraries — return only dummy responses.

  expected_output: >
    A single runnable Python script (script.py) that:
      - Uses Django to implement a minimal backend server.
      - Has route definitions and views for all API endpoints.
      - Validates request data based on the OpenAPI schema.
      - Returns correct status codes and JSON responses for each scenario (201, 400, 500).
      - Can be executed directly using the command: `python script.py`.
