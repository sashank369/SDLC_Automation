```yaml
openapi: 3.0.3
info:
  title: User Registration API
  version: 1.0.0
  description: API for user registration and management, allowing users to create accounts, validate their information, and manage personal data.

servers:
  - url: https://api.example.com/v1

paths:
  /users:
    post:
      summary: Create a new user account
      description: Allows new users to register by providing personal details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Unique identifier for user login.
                  example: "johnDoe123"
                password:
                  type: string
                  description: A secure password for the user account.
                  example: "StrongPassword123!"
                email:
                  type: string
                  description: User's email address for communication and verification.
                  example: "john@example.com"
                first_name:
                  type: string
                  description: User's first name.
                  example: "John"
                last_name:
                  type: string
                  description: User's last name.
                  example: "Doe"
                date_of_birth:
                  type: string
                  format: date
                  description: User's date of birth for age verification.
                  example: "1990-01-01"
                phone_number:
                  type: string
                  description: User's phone number for additional communication. Optional.
                  example: "+1234567890"
                address:
                  type: object
                  properties:
                    street:
                      type: string
                      example: "123 Main St"
                    city:
                      type: string
                      example: "Hometown"
                    state:
                      type: string
                      example: "CA"
                    postal_code:
                      type: string
                      example: "90210"
      responses:
        '201':
          description: User account created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: "abc123"
                  message:
                    type: string
                    example: "User created successfully."
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email format."
        '409':
          description: User already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Username or email already exists."

  /users/{userId}:
    get:
      summary: Retrieve user details
      description: Fetches user information based on the provided user ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user.
          schema:
            type: string
      responses:
        '200':
          description: Successful response with user details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: "abc123"
                  username:
                    type: string
                    example: "johnDoe123"
                  email:
                    type: string
                    example: "john@example.com"
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  date_of_birth:
                    type: string
                    format: date
                    example: "1990-01-01"
                  phone_number:
                    type: string
                    example: "+1234567890"
                  address:
                    type: object
                    properties:
                      street:
                        type: string
                        example: "123 Main St"
                      city:
                        type: string
                        example: "Hometown"
                      state:
                        type: string
                        example: "CA"
                      postal_code:
                        type: string
                        example: "90210"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."

security:
  - apiKey: []
  
components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: x-api-key
      in: header
```